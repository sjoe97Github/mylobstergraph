name: My Lobsters Data Input

on:
  push:
    paths:
      - .github/workflows/lobsters.yml # Only run a new workflow every time this file (flat.yaml) file changes
  workflow_dispatch: # Required even though this is currently empty
  schedule:
#    - cron: '*/5 * * * *' # Run this workflow every 5 minutes
    - cron: '*/60 * * * *' # Run this workflow every 60 minutes

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps: # This workflow has 3 steps
      # The first step is to check out the repository so it can read the files inside of it and do other operations
      - name: Check out repo
        uses: actions/checkout@v2
#       # This step installs Deno, which is a new Javascript runtime that improves on Node. We'll use it for postprocessing later
#       - name: Setup deno
#         uses: denoland/setup-deno@main
#         with:
#           deno-version: v1.x
      # The third step is a Flat Action step. We fetch the data in the http_url and save it as downloaded_filename
      - name: Fetch newest 
        uses: githubocto/flat@v3
        with:
          http_url: https://lobste.rs/newest.json
          downloaded_filename: newest.json
      - name: Neo4j import
        uses: johnymontana/flat-graph@v1.2
        with:
          neo4j-user: ${{secrets.NEO4J_USER}}
          neo4j-password: ${{secrets.NEO4J_PASSWORD}}
          neo4j-uri: ${{secrets.NEO4J_URI}}
          filename: newest.json
          cypher-query: >
            UNWIND $value as article
            MERGE (s:User {username: article.submitter_user.username})
            SET s.created = DateTime(article.submitter_user.created_at),
            s.karma = article.submitter_user.karma,
            s.about = article.submitter_user.about,
            s.avatar = "https://lobste.rs" + article.submitter_user.avatar_url
            MERGE (i:User {username: article.submitter_user.invited_by_user})
            MERGE (i)<-[:INVITED_BY]-(s)
            MERGE (a:Article {short_id: article.short_id})
            SET a.url = article.url,
            a.score = article.score,
            a.title = article.title,
            a.comments = article.comments,
            a.created = DateTime(article.created_at)
            MERGE (s)-[:SUBMITTED]->(a)
            WITH article, a
            UNWIND article.tags as tag
            MERGE (t:Tag {name: tag})
            MERGE (a)-[:HAS_TAG]->(t)
